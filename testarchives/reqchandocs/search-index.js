var searchIndex = {};
searchIndex["reqchan"] = {"doc":"This crate defines a channel for requesting and receiving data. Each channel has only one requesting end, but it can have multiple responding ends. It is useful for implementing work sharing.","items":[[3,"Requester","reqchan","This end of the channel requests and receives data from its `Responder`(s).",null,null],[3,"RequestContract","","This is the contract returned by a successful `Requester::try_request()`. It represents the caller's exclusive access to the requesting side of the channel. The user can either try to get a datum from the responding side or attempt to cancel the request. To prevent data loss, `RequestContract` will panic if the user has not received a datum or cancelled the request.",null,null],[3,"Responder","","This end of the channel sends data in response to requests from its `Requester`.",null,null],[3,"ResponseContract","","This is the contract returned by a successful `Responder::try_response()`. It represents the caller's exclusive access to the responding side of the channel. It ensures the user sends a datum by panicking if they have not.",null,null],[4,"TryRequestError","","",null,null],[13,"Locked","","",0,null],[4,"TryReceiveError","","",null,null],[13,"Empty","","",1,null],[13,"Done","","",1,null],[4,"TryRespondError","","",null,null],[13,"NoRequest","","",2,null],[13,"Locked","","",2,null],[5,"channel","","This function creates a `reqchan` and returns a tuple containing the two ends of this bidirectional request->response channel.",null,null],[11,"try_request","","This methods tries to request item(s) from one or more `Responder`(s). If successful, it returns a `RequestContract` to either poll for data or cancel the request.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_receive","","This method attempts to receive a datum from one or more responder(s).",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_cancel","","This method attempts to cancel a request. This is useful for implementing a timeout.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"try_respond","","This method signals the intent of `Responder` to respond to a request. If successful, it returns a `ResponseContract` to ensure the user sends a datum.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"send","","This method tries to send a datum to the requesting end of the channel. It will then consume itself, thereby freeing the responding side of the channel.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"TryRequestError"],[4,"TryReceiveError"],[4,"TryRespondError"],[3,"Requester"],[3,"RequestContract"],[3,"Responder"],[3,"ResponseContract"]]};
initSearch(searchIndex);
